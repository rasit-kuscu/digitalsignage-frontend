{"version":3,"file":"tokens.js","sourceRoot":"","sources":["tokens.ts"],"names":[],"mappings":";;;;;;AAAA,qBAIO,eAAe,CAAC,CAAA;AAMvB,WAAY,YAAY;IACpB,iDAAK,CAAA;IACL,mDAAM,CAAA;IACN,qDAAO,CAAA;AACX,CAAC,EAJW,oBAAY,KAAZ,oBAAY,QAIvB;AAJD,IAAY,YAAY,GAAZ,oBAIX,CAAA;AAkBD;IACI,4BAAmB,SAAe,EAAS,QAAsC;QAA9D,cAAS,GAAT,SAAS,CAAM;QAAS,aAAQ,GAAR,QAAQ,CAA8B;IAAG,CAAC;IACzF,yBAAC;AAAD,CAAC,AAFD,IAEC;AAFY,0BAAkB,qBAE9B,CAAA;AAED;IAAA;IAMA,CAAC;IAAD,oBAAC;AAAD,CAAC,AAND,IAMC;AANqB,qBAAa,gBAMlC,CAAA;AAED;IAAqD,0CAAI;IAAzD;QAAqD,8BAAI;IAAE,CAAC;IAAD,6BAAC;AAAD,CAAC,AAA5D,CAAqD,WAAI,GAAG;AAAtC,8BAAsB,yBAAgB,CAAA;AAE5D;IAAA;IAIA,CAAC;IAAD,yBAAC;AAAD,CAAC,AAJD,IAIC;AAJY,0BAAkB,qBAI9B,CAAA","sourcesContent":["import {\n    ViewContainerRef,\n    ResolvedReflectiveProvider,\n    Type\n} from '@angular/core';\n\nimport { Modal } from '../providers/modal';\nimport { DialogRef } from './dialog-ref';\nimport { ModalControllingContextBuilder } from '../models/modal-context';\n\nexport enum DROP_IN_TYPE {\n    alert,\n    prompt,\n    confirm\n}\n\nexport interface ModalComponent<T> {\n    dialog: DialogRef<T>;\n\n    /**\n     * Invoked before a modal is dismissed.\n     * @return true or a promise that resolves to true to cancel dismissal.\n     */\n    beforeDismiss?(): boolean | Promise<boolean>;\n\n    /**\n     * Invoked before a modal is closed.\n     * @return true or a promise that resolves to true to cancel closing.\n     */\n    beforeClose?(): boolean | Promise<boolean>;\n}\n\nexport class ModalCompileConfig {\n    constructor(public component: Type, public bindings: ResolvedReflectiveProvider[]) {}\n}\n\nexport abstract class ModalRenderer {\n    public abstract render(type: Type,\n           viewContainer: ViewContainerRef,\n           bindings: ResolvedReflectiveProvider[],\n           dialog: DialogRef<any>\n    ): Promise<DialogRef<any>>;\n}\n\nexport abstract class ModalBackdropComponent extends Type {}\n\nexport class ModalDropInFactory {\n    alert: <T>(modal: Modal) => ModalControllingContextBuilder<T>;\n    prompt: <T>(modal: Modal) => ModalControllingContextBuilder<T>;\n    confirm: <T>(modal: Modal) => ModalControllingContextBuilder<T>;\n}\n"]}