{"version":3,"file":"modal-context.js","sourceRoot":"","sources":["modal-context.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,qBAA6C,eAAe,CAAC,CAAA;AAE7D,8BAAiD,8BAA8B,CAAC,CAAA;AAChF,sBAAmC,sBAAsB,CAAC,CAAA;AAG7C,sBAAc,GAAG;IAC1B,UAAU,EAAE,IAAI;IAChB,QAAQ,EAAE,CAAC,EAAE,CAAC;IACd,WAAW,EAAE,qBAAqB,OAAe;QAC7C,MAAM,CAAiB,IAAI,CAAC,QAAS,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;IAChE,CAAC;CACJ,CAAC;AAEF,IAAM,eAAe,GAAG;IACpB,YAAY;IACZ,UAAU;IACV,SAAS;CACZ,CAAC;AAEF;IAAA;IAmCA,CAAC;IAZG,gCAAS,GAAT;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,KAAK,CAAC;YAC1B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAE3B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACvB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,QAAQ,GAAG,CAAS,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAgB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACtD,IAAI,CAAC,QAAQ,GAAG,sBAAc,CAAC,QAAQ,CAAC;QAC5C,CAAC;IACL,CAAC;IACL,mBAAC;AAAD,CAAC,AAnCD,IAmCC;AAnCY,oBAAY,eAmCxB,CAAA;AAED;;;GAGG;AAEH;IAAiE,uCAAe;IAuB5E,6BACI,aAAkC,EAClC,cAAoC,EACpC,QAAiC;QAFjC,6BAAkC,GAAlC,yBAAkC;QAClC,8BAAoC,GAApC,0BAAoC;QACpC,wBAAiC,GAAjC,oBAAiC;QAEjC,kBACI,cAAM,CAAM,sBAAc,EAAE,aAAa,IAAI,EAAE,CAAC,EAChD,kBAAU,CAAS,eAAe,EAAE,cAAc,IAAI,EAAE,CAAC,EACzD,QAAQ,CACX,CAAC;IACN,CAAC;IAlCL;QAAC,iBAAU,EAAE;;2BAAA;IAmCb,0BAAC;AAAD,CAAC,AAlCD,CAAiE,4BAAY,GAkC5E;AAlCY,2BAAmB,sBAkC/B,CAAA","sourcesContent":["import { Injectable, ViewContainerRef } from '@angular/core';\n\nimport { FluentAssign, FluentAssignMethod } from './../framework/fluent-assign';\nimport { extend, arrayUnion } from './../framework/utils';\nimport { DialogRef } from './dialog-ref';\n\nexport const DEFAULT_VALUES = {\n    isBlocking: true,\n    keyboard: [27],\n    supportsKey: function supportsKey(keyCode: number): boolean {\n        return (<Array<number>>this.keyboard).indexOf(keyCode) > -1;\n    }\n};\n\nconst DEFAULT_SETTERS = [\n    'isBlocking',\n    'keyboard',\n    'message'\n];\n\nexport class ModalContext {\n    /**\n     * Describes if the modal is blocking modal.\n     * A Blocking modal is not closable by clicking outside of the modal window.\n     * Defaults to false.\n     */\n    isBlocking: boolean;\n\n    /**\n     * Keyboard value/s that close the modal.\n     * Accepts either a single numeric value or an array of numeric values.\n     * A modal closed by a keyboard stroke will result in a 'reject' notification from the promise.\n     * Defaults to 27, set `null` implicitly to disable.\n     */\n    keyboard: Array<number> | number;\n\n    /**\n     * The core message to display.\n     * A modal might have an extended message (e.g: HTML message) or other fields (e.g: title) but\n     * all models, at core, convey a message thus message is common to all modals.\n     */\n    message: string;\n    \n    normalize(): void {\n        if (this.isBlocking !== false)\n            this.isBlocking = true;\n\n        if (this.keyboard === null) {\n            this.keyboard = [];\n        } else if (typeof this.keyboard === 'number') {\n            this.keyboard = [<number>this.keyboard];\n        } else if (!Array.isArray(<Array<number>>this.keyboard)) {\n            this.keyboard = DEFAULT_VALUES.keyboard;\n        }\n    }\n}\n\n/**\n * A core context builder for a modal window instance, used to define the context upon\n * a modal choose it's behaviour.\n */\n@Injectable()\nexport class ModalContextBuilder<T extends ModalContext> extends FluentAssign<T> {\n    /**\n     * Describes if the modal is blocking modal.\n     * A Blocking modal is not closable by clicking outside of the modal window.\n     * Defaults to false.\n     */\n    isBlocking: FluentAssignMethod<boolean, this>;\n\n    /**\n     * Keyboard value/s that close the modal.\n     * Accepts either a single numeric value or an array of numeric values.\n     * A modal closed by a keyboard stroke will result in a 'reject' notification from the promise.\n     * Defaults to 27, set `null` implicitly to disable.\n     */\n    keyboard: FluentAssignMethod<Array<number> | number, this>;\n\n    /**\n     * The core message to display.\n     * A modal might have an extended message (e.g: HTML message) or other fields (e.g: title) but\n     * all models, at core, convey a message thus message is common to all modals.\n     */\n    message: FluentAssignMethod<string, this>;\n\n    constructor(\n        defaultValues: T | T[] = undefined,\n        initialSetters: string[] = undefined,\n        baseType: new () => T = undefined\n    ) {\n        super(\n            extend<any>(DEFAULT_VALUES, defaultValues || {}),\n            arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n            baseType\n        );\n    }\n}\n\nexport interface ModalControllingContextBuilder<T> {\n    open(viewContainer?: ViewContainerRef): Promise<DialogRef<T>>;\n}\n"]}