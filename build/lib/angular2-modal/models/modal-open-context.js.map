{"version":3,"file":"modal-open-context.js","sourceRoot":"","sources":["modal-open-context.ts"],"names":[],"mappings":";;;;;;AAIA,sBAAsB,oBAAoB,CAAC,CAAA;AAE3C,8BAAkF,iBAAiB,CAAC,CAAA;AACpG,sBAA2B,oBAAoB,CAAC,CAAA;AAEhD,IAAM,eAAe,GAAG;IACpB,WAAW;CACd,CAAC;AAEF;IAAsC,oCAAY;IAAlD;QAAsC,8BAAY;IAGlD,CAAC;IAAD,uBAAC;AAAD,CAAC,AAHD,CAAsC,4BAAY,GAGjD;AAHY,wBAAgB,mBAG5B,CAAA;AAED;;;;GAIG;AACH;IAC4D,2CAAsB;IAS9E,iCACI,aAA4B,EAC5B,cAAoC,EACpC,QAAiC;QAFjC,6BAA4B,GAA5B,yBAA4B;QAC5B,8BAAoC,GAApC,0BAAoC;QACpC,wBAAiC,GAAjC,oBAAiC;QAEjC,kBACI,aAAa,IAAS,EAAE,EACxB,kBAAU,CAAS,eAAe,EAAE,cAAc,IAAI,EAAE,CAAC,EACzD,QAAQ,CACX,CAAC;IACN,CAAC;IAED;;;OAGG;IACO,8CAAY,GAAtB,UAAuB,MAAS;QAC5B,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,sCAAI,GAAJ,UAAK,aAAgC;QACjC,IAAI,MAAM,GAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QAE9B,EAAE,CAAC,CAAC,CAAE,CAAC,MAAM,CAAC,KAAK,YAAY,aAAK,CAAE,CAAC,CAAC,CAAC;YACrC,MAAM,CAAM,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC,CAAC;QACzF,CAAC;QAED,IAAI,QAAQ,GAAG,OAAO,IAAI,CAAC,YAAY,KAAK,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACpF,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;IAChF,CAAC;IACL,8BAAC;AAAD,CAAC,AA7CD,CAC4D,mCAAmB,GA4C9E;AA7CqB,+BAAuB,0BA6C5C,CAAA","sourcesContent":["import { ResolvedReflectiveProvider, ViewContainerRef } from '@angular/core';\n\nimport { FluentAssignMethod } from '../framework/fluent-assign';\nimport { ModalComponent } from './tokens';\nimport { Modal } from '../providers/modal';\nimport { DialogRef } from './dialog-ref';\nimport { ModalContext, ModalContextBuilder, ModalControllingContextBuilder } from './modal-context';\nimport { arrayUnion } from '../framework/utils';\n\nconst DEFAULT_SETTERS = [\n    'component'\n];\n\nexport class ModalOpenContext extends ModalContext {\n    component: any;\n    modal: Modal;\n}\n\n/**\n * A Modal Context that knows about the modal service, and so can open a modal window on demand.\n * Use the fluent API to configure the preset and then invoke the 'open' method to open a modal\n * based on the context.\n */\nexport abstract class ModalOpenContextBuilder<T extends ModalOpenContext>\n                                                    extends ModalContextBuilder<T>\n                                                    implements ModalControllingContextBuilder<T> {\n\n    /**\n     * A Class for the footer container.\n     * Default: modal-footer\n     */\n    component: FluentAssignMethod<ModalComponent<T>, this>;\n\n    constructor(\n        defaultValues: T = undefined,\n        initialSetters: string[] = undefined,\n        baseType: new () => T = undefined\n    ) {\n        super(\n            defaultValues || <any>{},\n            arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n            baseType\n        );\n    }\n    \n    /**\n     * Hook to alter config and return bindings.\n     * @param config\n     */\n    protected $$beforeOpen(config: T): ResolvedReflectiveProvider[] {\n        return [];\n    } \n    \n    /**\n     * Open a modal window based on the configuration of this config instance.\n     * @param viewContainer If set opens the modal inside the supplied viewContainer\n     * @returns Promise<DialogRef>\n     */\n    open(viewContainer?: ViewContainerRef): Promise<DialogRef<T>> {\n        let config: T = this.toJSON();\n\n        if (! (config.modal instanceof Modal) ) {\n            return <any>Promise.reject(new Error('Configuration Error: modal service not set.'));\n        }\n\n        let bindings = typeof this.$$beforeOpen === 'function' && this.$$beforeOpen(config);\n        return config.modal.open(config.component, config, bindings, viewContainer);\n    }\n}\n"]}