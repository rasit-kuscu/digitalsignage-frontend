{"version":3,"file":"modal.js","sourceRoot":"","sources":["modal.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Type,\n  ReflectiveInjector,\n  ViewContainerRef,\n  Injectable,\n  ResolvedReflectiveProvider,\n  Optional\n} from '@angular/core';\n\nimport {\n  ModalRenderer,\n  ModalCompileConfig,\n  ModalBackdropComponent,\n  ModalDropInFactory\n} from '../models/tokens';\n\nimport { DialogRefStack } from '../models/dialog-ref-stack';\nimport { DialogRef } from '../angular2-modal';\nimport { ModalContext, ModalControllingContextBuilder } from '../models/modal-context';\n\nconst _stack = new DialogRefStack<any>();\nconst unsupportedDropIn: any = () => {\n  throw new Error('Unsupported Drop-in.');\n};\n\nconst UnsupportedDropInFactory: ModalDropInFactory = {\n  alert: unsupportedDropIn,\n  prompt: unsupportedDropIn,\n  confirm: unsupportedDropIn\n};\n\nfunction normalizeDropInFactory(dropInFactory: ModalDropInFactory): ModalDropInFactory {\n  if (!dropInFactory) return UnsupportedDropInFactory;\n  return ['alert', 'prompt', 'confirm']\n    .reduce((dif, key) => {\n      if (typeof dif[key] !== 'function') dif[key] = <any>unsupportedDropIn;\n      return dif;\n    }, dropInFactory);\n}\n\n@Injectable()\nexport class Modal {\n  /**\n   * A Default view container ref, usually the app root container ref.\n   * Make sure not to provide something that might get destroyed, it will destroy the modals too.\n   * The container is used as logical view holder, elements might be moved.\n   * Has to be set manually until we can find a way to get it automatically.\n   */\n  public defaultViewContainer: ViewContainerRef;\n  private _dropIn: ModalDropInFactory;\n\n  constructor(private _modalRenderer: ModalRenderer,\n              private _backdrop: ModalBackdropComponent,\n              @Optional() _dropIn: ModalDropInFactory) {\n    this._dropIn = normalizeDropInFactory(_dropIn);\n  }\n\n  alert(): ModalControllingContextBuilder<any> {\n    return this._dropIn.alert<any>(this);\n  }\n\n  prompt(): ModalControllingContextBuilder<any> {\n    return this._dropIn.prompt<any>(this);\n  }\n\n  confirm(): ModalControllingContextBuilder<any> {\n    return this._dropIn.confirm<any>(this);\n  }\n\n  /**\n   * Opens a modal window inside an existing component.\n   * If\n   * @param componentType The angular Component to render as the modal content.\n   * @param bindings Resolved providers that will inject into the component provided.\n   * @param context The context for the modal, attached to the dialog instance, DialogRef.context.\n   *        Default: {}\n   * @param viewContainer The element to block using the modal.\n   *        Default: The value set in defaultViewContainer.\n   * @param inside If true, render's the component inside the ViewContainerRef,\n   *        otherwise render's the component in the root element (body in DOM)\n   *        Default: true if ViewContainer supplied, false if not supplied.\n   * @returns {Promise<DialogRef>}\n   */\n  public open(componentType: Type,\n              context: ModalContext = undefined,\n              bindings: ResolvedReflectiveProvider[] = undefined,\n              viewContainer: ViewContainerRef = undefined,\n              inside?: boolean): Promise<DialogRef<any>> {\n\n    inside = inside === undefined ? !!viewContainer : !!inside;\n\n    if (!viewContainer) {\n      if (!this.defaultViewContainer) {\n        throw new Error('defaultViewContainer not set.');\n      }\n      viewContainer = this.defaultViewContainer;\n    }\n\n    if (context) {\n      context.normalize();\n    }\n\n    let dialog = new DialogRef(context || {});\n    dialog.inElement = inside;\n\n    let compileConfig = new ModalCompileConfig(componentType, bindings || []);\n\n\n    let b = ReflectiveInjector.resolve([\n      {provide: Modal, useValue: this},\n      {provide: ModalRenderer, useValue: this._modalRenderer},\n      {provide: DialogRef, useValue: dialog},\n      {provide: ModalCompileConfig, useValue: compileConfig}\n    ]);\n\n    return this._modalRenderer.render(this._backdrop, viewContainer, b, dialog)\n      .then(dialog => {\n        _stack.pushManaged(dialog);\n        dialog.onDestroy.subscribe( () => _stack.remove(dialog) );\n        return dialog;\n      });\n  }\n\n  /**\n   * Check if a given DialogRef is the top most ref in the stack.\n   * TODO: distinguish between body modal vs in element modal.\n   * @param dialogRef\n   * @returns {boolean}\n   */\n  isTopMost(dialogRef: DialogRef<any>): boolean {\n    return _stack.indexOf(dialogRef) === _stack.length - 1;\n  }\n\n  stackPosition(dialogRef: DialogRef<any>) {\n    return _stack.indexOf(dialogRef);\n  }\n\n  get stackLength(): number {\n    return _stack.length;\n  }\n}\n"]}