{"version":3,"file":"dom-modal-renderer.js","sourceRoot":"","sources":["dom-modal-renderer.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAQO,eAAe,CAAC,CAAA;AAOvB;IACE,0BAAoB,GAAsB;QAAtB,QAAG,GAAH,GAAG,CAAmB;IAC1C,CAAC;IAED,iCAAM,GAAN,UAAO,IAAU,EACV,aAA+B,EAC/B,QAAsC,EACtC,MAAsB;QAE3B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC;aACnC,IAAI,CAAC,UAAA,UAAU;YACd,IAAM,WAAW,GAAG,aAAa,CAAC,cAAc,CAAC;YACjD,IAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC;gBAClE,yBAAkB,CAAC,qBAAqB,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,WAAW,CAAC;YAChF,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,EAAE,aAAa,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QACxF,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,MAAyB;YAC9B,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;gBACrB,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;YACjF,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;YAC3D,CAAC;YAED,MAAM,CAAC,SAAS,CAAC,SAAS,CAAE;gBAC1B,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,QAAQ,CAAC,UAAU,KAAK,UAAU,CAAC,CAAC,CAAC;oBACrD,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,IAAI,CAAG,cAAM,OAAA,MAAM,CAAC,OAAO,EAAE,EAAhB,CAAgB,CAAE,CAAC;gBAC/D,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,OAAO,EAAE,CAAC;gBACnB,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;IAlCH;QAAC,iBAAU,EAAE;;wBAAA;IAmCb,uBAAC;AAAD,CAAC,AAlCD,IAkCC;AAlCY,wBAAgB,mBAkC5B,CAAA","sourcesContent":["import {\n  ViewContainerRef,\n  ComponentResolver,\n  ComponentRef,\n  ResolvedReflectiveProvider,\n  ReflectiveInjector,\n  Injectable,\n  Type\n} from '@angular/core';\n\n\nimport { DialogRef } from '../models/dialog-ref';\nimport { ModalRenderer } from '../models/tokens';\n\n@Injectable()\nexport class DOMModalRenderer implements ModalRenderer {\n  constructor(private _cr: ComponentResolver) {\n  }\n\n  render(type: Type,\n         viewContainer: ViewContainerRef,\n         bindings: ResolvedReflectiveProvider[],\n         dialog: DialogRef<any>): Promise<DialogRef<any>> {\n\n    return this._cr.resolveComponent(type)\n      .then(cmpFactory => {\n        const ctxInjector = viewContainer.parentInjector;\n        const childInjector = Array.isArray(bindings) && bindings.length > 0 ?\n          ReflectiveInjector.fromResolvedProviders(bindings, ctxInjector) : ctxInjector;\n        return viewContainer.createComponent(cmpFactory, viewContainer.length, childInjector);\n      })\n      .then((cmpRef: ComponentRef<any>) => {\n        if (dialog.inElement) {\n          viewContainer.element.nativeElement.appendChild(cmpRef.location.nativeElement);\n        } else {\n          document.body.appendChild(cmpRef.location.nativeElement);\n        }\n\n        dialog.onDestroy.subscribe( () => {\n          if (typeof cmpRef.instance.canDestroy === 'function') {\n            cmpRef.instance.canDestroy().then ( () => cmpRef.destroy() );\n          } else {\n            cmpRef.destroy();\n          }\n        });\n\n        return dialog;\n      });\n  }\n}\n\n"]}