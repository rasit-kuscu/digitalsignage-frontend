{"version":3,"file":"modal-backdrop.js","sourceRoot":"","sources":["modal-backdrop.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAOO,eAAe,CAAC,CAAA;AAEvB,uBAAiC,iBAAiB,CAAC,CAAA;AAEnD,uBAAmC,qBAAqB,CAAC,CAAA;AACzD,+BAA0B,sBAAsB,CAAC,CAAA;AACjD,sBAAsB,SAAS,CAAC,CAAA;AAahC;IAII,4BACY,MAAoC,EACpC,cAAkC,EAClC,MAAa,EACb,GAAsB;QAHtB,WAAM,GAAN,MAAM,CAA8B;QACpC,mBAAc,GAAd,cAAc,CAAoB;QAClC,WAAM,GAAN,MAAM,CAAO;QACb,QAAG,GAAH,GAAG,CAAmB;QAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;IAClC,CAAC;IAED,4CAAe,GAAf;QAAA,iBAaC;QAXG,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC;aACnD,IAAI,CAAC,UAAA,UAAU;YACZ,IAAM,GAAG,GAAG,KAAI,CAAC,SAAS,EACtB,QAAQ,GAAG,KAAI,CAAC,cAAc,CAAC,QAAQ,EACvC,WAAW,GAAG,GAAG,CAAC,cAAc,CAAC;YAErC,IAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC;gBAChE,yBAAkB,CAAC,qBAAqB,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,WAAW,CAAC;YAClF,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,UAAU;gBACzB,GAAG,CAAC,eAAe,CAAC,UAAU,EAAE,GAAG,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACX,CAAC;IAvBD;QAAC,gBAAS,CAAC,SAAS,EAAE,EAAC,IAAI,EAAE,uBAAgB,EAAC,CAAC;;yDAAA;IAXnD;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,gBAAgB;YAC1B,UAAU,EAAE,CAAE,yBAAgB,CAAE;YAChC,QAAQ,EACZ,8KAGO;SACN,CAAC;;0BAAA;IA4BF,yBAAC;AAAD,CAAC,AA3BD,IA2BC;AA3BY,0BAAkB,qBA2B9B,CAAA","sourcesContent":["import {\n    Component,\n    ComponentResolver,\n    ViewContainerRef,\n    ReflectiveInjector,\n    ViewChild,\n    AfterViewInit\n} from '@angular/core';\n\nimport { NgTemplateOutlet } from '@angular/common';\n\nimport { ModalCompileConfig } from '../../models/tokens';\nimport { DialogRef } from '../../angular2-modal';\nimport { Modal } from './modal';\nimport { BlankModalContext } from './modal-context';\n\n\n@Component({\n    selector: 'modal-backdrop',\n    directives: [ NgTemplateOutlet ],\n    template:\n`<div [class]=\"context.backdropCss\">\n    <div [class]=\"context.overlayCss\" #overlay></div>\n    <template [ngTemplateOutlet]=\"context.templateRef\"></template>\n</div>`\n})\nexport class BlankModalBackdrop implements AfterViewInit {\n    public context: BlankModalContext;\n    @ViewChild('overlay', {read: ViewContainerRef}) private vcOverlay: ViewContainerRef;\n\n    constructor(\n        private dialog: DialogRef<BlankModalContext>,\n        private _compileConfig: ModalCompileConfig,\n        private _modal: Modal,\n        private _cr: ComponentResolver) {\n        this.context = dialog.context;\n    }\n\n    ngAfterViewInit() {\n\n        this._cr.resolveComponent(this._compileConfig.component)\n            .then(cmpFactory => {\n                const vcr = this.vcOverlay,\n                    bindings = this._compileConfig.bindings,\n                    ctxInjector = vcr.parentInjector;\n\n                const childInjector = Array.isArray(bindings) && bindings.length > 0 ?\n                    ReflectiveInjector.fromResolvedProviders(bindings, ctxInjector) : ctxInjector;\n                return this.dialog.contentRef =\n                    vcr.createComponent(cmpFactory, vcr.length, childInjector);\n            });\n    }\n\n}\n"]}