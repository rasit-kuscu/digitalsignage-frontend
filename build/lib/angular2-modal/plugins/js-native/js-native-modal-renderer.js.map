{"version":3,"file":"js-native-modal-renderer.js","sourceRoot":"","sources":["js-native-modal-renderer.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAKO,eAAe,CAAC,CAAA;AAGvB,uBAA4C,qBAAqB,CAAC,CAAA;AAIlE;IAAA;IA+BA,CAAC;IA7BG,sCAAM,GAAN,UAAO,IAAU,EACV,aAA+B,EAC/B,QAAsC,EACtC,MAAuC;QAE1C,IAAI,MAAwB,CAAC;QAC7B,MAAM,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YAChC,KAAK,qBAAY,CAAC,KAAK;gBACnB,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBACrC,MAAM,GAAG,IAAI,CAAC;gBACd,KAAK,CAAC;YACV,KAAK,qBAAY,CAAC,MAAM;gBACpB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;gBAC7E,KAAK,CAAC;YACV,KAAK,qBAAY,CAAC,OAAO;gBACrB,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBAChD,KAAK,CAAC;QACd,CAAC;QAED,MAAM,CAAC,OAAO,GAAG,cAAO,CAAC,CAAC;QAE1B,EAAE,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,OAAO,EAAE,CAAC;QACrB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACzB,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IA/BL;QAAC,iBAAU,EAAE;;6BAAA;IAgCb,4BAAC;AAAD,CAAC,AA/BD,IA+BC;AA/BY,6BAAqB,wBA+BjC,CAAA","sourcesContent":["import {\n    ViewContainerRef,\n    ResolvedReflectiveProvider,\n    Injectable,\n    Type\n} from '@angular/core';\n\nimport { DialogRef } from '../../models/dialog-ref';\nimport { ModalRenderer, DROP_IN_TYPE } from '../../models/tokens';\nimport { JSNativeModalContext } from './modal-context';\n\n@Injectable()\nexport class JSNativeModalRenderer implements ModalRenderer {\n\n    render(type: Type,\n           viewContainer: ViewContainerRef,\n           bindings: ResolvedReflectiveProvider[],\n           dialog: DialogRef<JSNativeModalContext>): Promise<DialogRef<any>> {\n\n        let result: string | boolean;\n        switch (dialog.context.dialogType) {\n            case DROP_IN_TYPE.alert:\n                window.alert(dialog.context.message);\n                result = true;\n                break;\n            case DROP_IN_TYPE.prompt:\n                result = window.prompt(dialog.context.message, dialog.context.promptDefault);\n                break;\n            case DROP_IN_TYPE.confirm:\n                result = window.confirm(dialog.context.message);\n                break;\n        }\n\n        dialog.destroy = () => {};\n\n        if (result === false) {\n            dialog.dismiss();\n        } else {\n            dialog.close(result);\n        }\n\n        return Promise.resolve(dialog);\n    }\n}\n\n"]}