{"version":3,"file":"modal-content.js","sourceRoot":"","sources":["modal-content.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBASO,eAAe,CAAC,CAAA;AAEvB,sBAAsB,SAAS,CAAC,CAAA;AAChC,uBAAmC,qBAAqB,CAAC,CAAA;AACzD,2BAA0B,yBAAyB,CAAC,CAAA;AAGpD;;GAEG;AAYH;IAKE,yBAAmB,MAAkC,EACjC,MAAa,EACb,cAAkC,EAClC,GAAsB;QAHvB,WAAM,GAAN,MAAM,CAA4B;QACjC,WAAM,GAAN,MAAM,CAAO;QACb,mBAAc,GAAd,cAAc,CAAoB;QAClC,QAAG,GAAH,GAAG,CAAmB;QACxC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;IAChC,CAAC;IAED,yCAAe,GAAf;QAAA,iBAiBC;QAhBC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC;aACrD,IAAI,CAAC,UAAA,UAAU;YACd,IAAM,GAAG,GAAG,KAAI,CAAC,cAAc,EAC7B,QAAQ,GAAG,KAAI,CAAC,cAAc,CAAC,QAAQ,EACvC,WAAW,GAAG,GAAG,CAAC,cAAc,CAAC;YAEnC,IAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC;gBAClE,yBAAkB,CAAC,qBAAqB,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,WAAW,CAAC;YAEhF,EAAE,CAAC,CAAC,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC;gBACpC,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAC1C,CAAC;YAED,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,UAAU;gBAC3B,GAAG,CAAC,eAAe,CAAC,UAAU,EAAE,GAAG,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACP,CAAC;IAED,wCAAc,GAAd;QACE,kDAAkD;QAClD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YACxE,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAjCD;QAAC,gBAAS,CAAC,cAAc,CAAC;;yDAAA;IAC1B;QAAC,gBAAS,CAAC,aAAa,EAAE,EAAC,IAAI,EAAE,uBAAgB,EAAC,CAAC;;2DAAA;IAdrD;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,eAAe;YACzB,QAAQ,EAAE,gVAML;YACL,aAAa,EAAE,wBAAiB,CAAC,IAAI;SACtC,CAAC;;uBAAA;IAqCF,sBAAC;AAAD,CAAC,AApCD,IAoCC;AApCY,uBAAe,kBAoC3B,CAAA","sourcesContent":["import {\n  Component,\n  ComponentResolver,\n  ElementRef,\n  ViewContainerRef,\n  ReflectiveInjector,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit\n} from '@angular/core';\n\nimport { Modal } from './modal';\nimport { ModalCompileConfig } from '../../models/tokens';\nimport { DialogRef } from '../../models/dialog-ref';\nimport { VEXModalContext } from './modal-context';\n\n/**\n * A component that acts as a top level container for an open modal window.\n */\n@Component({\n  selector: 'modal-content',\n  template: `<div tabindex=\"-1\" role=\"dialog\"\n      [class]=\"context.contentClassName\" (clickOutside)=\"onClickOutside()\" #dlgContainer>\n    <div style=\"display: none\" #modalDialog></div>    \n    <div *ngIf=\"context.showCloseButton\" \n         [class]=\"context.closeClassName\" \n         (click)=\"dialog.dismiss()\"></div>\n</div>`,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class VexModalContent implements AfterViewInit {\n  private context: VEXModalContext;\n  @ViewChild('dlgContainer') private dlgContainer: ElementRef;\n  @ViewChild('modalDialog', {read: ViewContainerRef}) private _viewContainer: ViewContainerRef;\n\n  constructor(public dialog: DialogRef<VEXModalContext>,\n              private _modal: Modal,\n              private _compileConfig: ModalCompileConfig,\n              private _cr: ComponentResolver) {\n    this.context = dialog.context;\n  }\n\n  ngAfterViewInit() {\n    this._cr.resolveComponent(this._compileConfig.component)\n      .then(cmpFactory => {\n        const vcr = this._viewContainer,\n          bindings = this._compileConfig.bindings,\n          ctxInjector = vcr.parentInjector;\n\n        const childInjector = Array.isArray(bindings) && bindings.length > 0 ?\n          ReflectiveInjector.fromResolvedProviders(bindings, ctxInjector) : ctxInjector;\n\n        if (this.dlgContainer.nativeElement) {\n          this.dlgContainer.nativeElement.focus();\n        }\n\n        return this.dialog.contentRef =\n          vcr.createComponent(cmpFactory, vcr.length, childInjector);\n      });\n  }\n\n  onClickOutside() {\n    // check that this modal is the last in the stack.\n    if (this._modal.isTopMost(this.dialog) && !this.dialog.context.isBlocking)\n      this.dialog.dismiss();\n  }\n}\n"]}