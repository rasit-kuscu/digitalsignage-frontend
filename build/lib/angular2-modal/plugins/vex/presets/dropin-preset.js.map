{"version":3,"file":"dropin-preset.js","sourceRoot":"","sources":["dropin-preset.ts"],"names":[],"mappings":";;;;;;AACA,uBAA6B,wBAAwB,CAAC,CAAA;AAGtD,kCAAqE,sBAAsB,CAAC,CAAA;AAC5F,8BAAkD,iBAAiB,CAAC,CAAA;AAEpE,sBAAuB,0BAA0B,CAAC,CAAA;AAElD,IAAM,cAAc,GAAG;IACnB,WAAA,mCAAS;IACT,SAAA,8BAAO;IACP,KAAK,EAAE,IAAI;IACX,SAAS,EAAE,QAAQ;CACtB,CAAC;AAEF,IAAM,eAAe,GAAG;IACpB,OAAO;IACP,WAAW;IACX,aAAa;IACb,iBAAiB;CACpB,CAAC;AAEF;;GAEG;AACH;IAAkC,gCAAY;IAA9C;QAAkC,8BAAY;IAgC9C,CAAC;IAHG,sBAAI,mCAAS;aAAb;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,KAAK,qBAAY,CAAC,MAAM,CAAC;QACnD,CAAC;;;OAAA;IACL,mBAAC;AAAD,CAAC,AAhCD,CAAkC,4BAAY,GAgC7C;AAhCY,oBAAY,eAgCxB,CAAA;AAED;;GAEG;AACH;IAAyC,uCAAiC;IAuBtE,6BAAY,KAAY,EAAE,UAAwB,EAAE,aAAuC;QAAvC,6BAAuC,GAAvC,yBAAuC;QACvF,kBACI,KAAK,EACL,cAAM,CAAM,cAAM,CAAC,EAAC,OAAA,KAAK,EAAE,YAAA,UAAU,EAAC,EAAE,cAAc,CAAC,EAAE,aAAa,IAAI,EAAE,CAAC,EAC7E,eAAe,EACf,YAAY,CACf,CAAC;IACN,CAAC;IAED,0CAAY,GAAZ,UAAa,MAAoB;QAC7B,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC;QAED,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;YACxB,KAAK,qBAAY,CAAC,MAAM;gBACpB,MAAM,CAAC,aAAa,GAAG,SAAS,CAAC;YACrC,KAAK,qBAAY,CAAC,OAAO;gBACrB,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;oBACnB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBAC3C,CAAC;gBACD,KAAK,CAAC;QACd,CAAC;QACD,MAAM,CAAC,gBAAK,CAAC,YAAY,YAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IACL,0BAAC;AAAD,CAAC,AAhDD,CAAyC,mCAAmB,GAgD3D;AAhDY,2BAAmB,sBAgD/B,CAAA","sourcesContent":["import { ResolvedReflectiveProvider } from '@angular/core';\nimport { DROP_IN_TYPE } from '../../../models/tokens';\nimport { FluentAssignMethod } from '../../../framework/fluent-assign';\nimport { Modal } from '../modal';\nimport { DialogFormModal as component,  FormDropIn as content } from '../dialog-form-modal';\nimport { DialogPreset, DialogPresetBuilder } from './dialog-preset';\n\nimport { extend } from '../../../framework/utils';\n\nconst DEFAULT_VALUES = {\n    component,\n    content,\n    okBtn: 'OK',\n    cancelBtn: 'Cancel'\n};\n\nconst DEFAULT_SETTERS = [\n    'okBtn',\n    'cancelBtn',\n    'placeholder',\n    'showCloseButton'\n];\n\n/**\n * Data definition\n */\nexport class DropInPreset extends DialogPreset {\n\n    /**\n     * the message to display on the modal.\n     */\n    message: string;\n\n    /**\n     * OK button caption.\n     * Default: OK\n     * Set to false ('', undefined, null, false) to remove button.\n     */\n    okBtn: string;\n\n    /**\n     * Cancel button caption.\n     * Default: Cancel\n     * Set to false ('', undefined, null, false) to remove button.\n     */\n    cancelBtn: string;\n\n    /**\n     * A placeholder for the input element.\n     * Valid only for prompt modal.\n     */\n    placeholder: string;\n\n    dropInType: DROP_IN_TYPE;\n\n    get showInput(): boolean {\n        return this.dropInType === DROP_IN_TYPE.prompt;\n    }\n}\n\n/**\n * A Preset representing all 3 drop ins (alert, prompt, confirm)\n */\nexport class DropInPresetBuilder extends DialogPresetBuilder<DropInPreset> {\n\n    /**\n     * the message to display on the modal.\n     */\n    message: FluentAssignMethod<string, this>;\n\n    /**\n     * The default Ok button caption.\n     */\n    okBtn: FluentAssignMethod<string, this>;\n\n    /**\n     * The default Cancel button caption.\n     */\n    cancelBtn: FluentAssignMethod<string, this>;\n\n    /**\n     * A placeholder for the input element.\n     * Valid only for prompt modal.\n     */\n    placeholder: FluentAssignMethod<string, this>;\n\n    constructor(modal: Modal, dropInType: DROP_IN_TYPE, defaultValues: DropInPreset = undefined) {\n        super(\n            modal,\n            extend<any>(extend({modal, dropInType}, DEFAULT_VALUES), defaultValues || {}),\n            DEFAULT_SETTERS,\n            DropInPreset\n        );\n    }\n\n    $$beforeOpen(config: DropInPreset): ResolvedReflectiveProvider[] {\n        if (config.okBtn) {\n            this.addOkButton(config.okBtn);\n        }\n\n        switch (config.dropInType) {\n            case DROP_IN_TYPE.prompt:\n                config.defaultResult = undefined;\n            case DROP_IN_TYPE.confirm:\n                if (config.cancelBtn) {\n                    this.addCancelButton(config.cancelBtn);\n                }\n                break;\n        }\n        return super.$$beforeOpen(config);\n    }\n}\n"]}