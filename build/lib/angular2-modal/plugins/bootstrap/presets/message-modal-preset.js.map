{"version":3,"file":"message-modal-preset.js","sourceRoot":"","sources":["message-modal-preset.ts"],"names":[],"mappings":";;;;;;AAAA,8BAA+D,kCAAkC,CAAC,CAAA;AAElG,8BAAsD,kBAAkB,CAAC,CAAA;AACzE,8BAA+B,kBAAkB,CAAC,CAAA;AAClD,sBAAmC,0BAA0B,CAAC,CAAA;AAG9D,IAAM,cAAc,GAAG;IACnB,SAAS,EAAE,8BAAc;IACzB,WAAW,EAAE,cAAc;IAC3B,SAAS,EAAE,YAAY;IACvB,WAAW,EAAE,cAAc;CAC9B,CAAC;AAEF,IAAM,eAAe,GAAG;IACpB,aAAa;IACb,OAAO;IACP,WAAW;IACX,WAAW;IACX,aAAa;CAChB,CAAC;AA2DF;;;;GAIG;AACH;IACwE,6CAAwB;IAkD5F,mCACI,aAA4B,EAC5B,cAAoC,EACpC,QAAiC;QAFjC,6BAA4B,GAA5B,yBAA4B;QAC5B,8BAAoC,GAApC,0BAAoC;QACpC,wBAAiC,GAAjC,oBAAiC;QAEjC,kBACI,cAAM,CAAM,cAAM,CAAC,EAAC,OAAO,EAAE,EAAE,EAAC,EAAE,cAAc,CAAC,EAAE,aAAa,IAAI,EAAE,CAAC,EACvE,kBAAU,CAAS,eAAe,EAAE,cAAc,IAAI,EAAE,CAAC,EACzD,QAAQ,CACX,CAAC;QAEF,8BAAc,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC;IAED,6CAAS,GAAT,UAAU,GAAW,EAAE,OAAe,EAAE,OAAoC;QACxE,IAAI,GAAG,GAAG;YACN,QAAQ,EAAE,GAAG;YACb,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;SACnB,CAAC;QAEF,IAAI,GAAG,GAAG,0BAAU,CAAC,SAAS,CAAC,CAAC;QAC/B,IAAI,CAAC,GAAG,CAAkC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEtD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACL,gCAAC;AAAD,CAAC,AA7ED,CACwE,qCAAqB,GA4E5F;AA7EqB,iCAAyB,4BA6E9C,CAAA","sourcesContent":["import { FluentAssignMethod, privateKey, setAssignAlias } from '../../../framework/fluent-assign';\nimport { BSMessageModalButtonConfig, BSMessageModalButtonHandler } from '../message-modal';\nimport { BSModalContext, BSModalContextBuilder}  from '../modal-context';\nimport { BSMessageModal } from '../message-modal';\nimport { extend, arrayUnion } from '../../../framework/utils';\n\n\nconst DEFAULT_VALUES = {\n    component: BSMessageModal,\n    headerClass: 'modal-header',\n    bodyClass: 'modal-body',\n    footerClass: 'modal-footer'\n};\n\nconst DEFAULT_SETTERS = [\n    'headerClass',\n    'title',\n    'titleHtml',\n    'bodyClass',\n    'footerClass'\n];\n\n\n/**\n * Data definition\n */\nexport interface MessageModalPreset extends BSModalContext {\n\n    /**\n     * A Class for the header (title) container.\n     * Default: modal-header\n     */\n    headerClass: string;\n\n    /**\n     * Caption for the title, enclosed in a H3 container.\n     */\n    title: string;\n\n    /**\n     * HTML for the title, if set overrides title property.\n     * The HTML is wrapped in a DIV element, inside the header container.\n     * Example:\n     <div class=\"modal-header\">\n     <div> HTML CONTENT INSERTED HERE </div>\n     </div>\n     * Note: HTML is not compiled.\n     */\n    titleHtml: string;\n\n    /**\n     * aliased by 'body'\n     * @aliasedBy body\n     */\n    message: string;\n\n    /**\n     * The body of the modal.\n     * Can be either text or HTML.\n     * Note: When using HTML, the template is not compiled. (binding and expression will not parse)\n     * @aliasOf message\n     */\n    body: string;\n\n    /**\n     * A Class for the body container.\n     * Default: modal-body\n     */\n    bodyClass: string;\n\n    /**\n     * A Class for the footer container.\n     * Default: modal-footer\n     */\n    footerClass: string;\n\n    buttons: BSMessageModalButtonConfig[];\n}\n\n/**\n * A Preset representing the configuration needed to open MessageModal.\n * This is an abstract implementation with no concrete behaviour.\n * Use derived implementation.\n */\nexport abstract class MessageModalPresetBuilder<T extends MessageModalPreset>\n                                                                extends BSModalContextBuilder<T> {\n\n    /**\n     * A Class for the header (title) container.\n     * Default: modal-header\n     */\n    headerClass: FluentAssignMethod<string, this>;\n\n    /**\n     * Caption for the title, enclosed in a H3 container.\n     */\n    title: FluentAssignMethod<string, this>;\n\n    /**\n     * HTML for the title, if set overrides title property.\n     * The HTML is wrapped in a DIV element, inside the header container.\n     * Example:\n     <div class=\"modal-header\">\n     <div> HTML CONTENT INSERTED HERE </div>\n     </div>\n     * Note: HTML is not compiled.\n     */\n    titleHtml: FluentAssignMethod<string, this>;\n\n    /**\n     * aliased by 'body'\n     * @aliasedBy body\n     */\n    message: FluentAssignMethod<string, this>;\n\n    /**\n     * The body of the modal.\n     * Can be either text or HTML.\n     * Note: When using HTML, the template is not compiled. (binding and expression will not parse)\n     * @aliasOf message\n     */\n    body: FluentAssignMethod<string, this>;\n\n    /**\n     * A Class for the body container.\n     * Default: modal-body\n     */\n    bodyClass: FluentAssignMethod<string, this>;\n\n    /**\n     * A Class for the footer container.\n     * Default: modal-footer\n     */\n    footerClass: FluentAssignMethod<string, this>;\n\n    constructor(\n        defaultValues: T = undefined,\n        initialSetters: string[] = undefined,\n        baseType: new () => T = undefined\n    ) {\n        super(\n            extend<any>(extend({buttons: []}, DEFAULT_VALUES), defaultValues || {}),\n            arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n            baseType\n        );\n\n        setAssignAlias(this, 'body', 'message', true);\n    }\n    \n    addButton(css: string, caption: string, onClick: BSMessageModalButtonHandler): this {\n        let btn = {\n            cssClass: css,\n            caption: caption,\n            onClick: onClick\n        };\n\n        let key = privateKey('buttons');\n        (this[key] as BSMessageModalButtonConfig[]).push(btn);\n        \n        return this;\n    }\n}\n"]}