{"version":3,"sources":["app/common/pipes/time.ago.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAQA;gBAAqC,mCAAS;gBAI5C,yBAAY,GAAqB;oBAC/B,kBAAM,GAAG,CAAC,CAAC;gBACb,CAAC;gBAED,mCAAS,GAAT,UAAU,GAAQ,EAAE,IAAY;oBAC9B,EAAE,CAAC,CAAC,GAAG,YAAY,IAAI,CAAC,CAAC,CAAC;wBACxB,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;wBACjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;4BAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;wBACpC,CAAC;wBACD,MAAM,CAAC,gBAAK,CAAC,SAAS,YAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;oBAC3C,CAAC;oBACD,MAAM,CAAC,gBAAK,CAAC,SAAS,YAAC,GAAG,EAAE,IAAI,CAAC,CAAC;gBACpC,CAAC;gBAEO,uCAAa,GAArB;oBAAA,iBAsBC;oBArBC,MAAM,CAAC,uBAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;wBAChD,IAAI,MAAa,CAAC;wBAClB,eAAe;wBACf,IAAI,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;wBAC/B,yCAAyC;wBACzC,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,KAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,GAAG,IAAI,CAAC;wBAChD,gBAAgB;wBAChB,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC;4BACf,MAAM,GAAG,OAAO,CAAC;wBACnB,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC;4BACtB,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC;wBACpD,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;4BACxB,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,GAAG,UAAU,CAAC;wBACxD,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;4BACzB,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,UAAU,CAAC;wBAC1D,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,QAAQ,CAAC;wBACzD,CAAC;wBAED,MAAM,CAAC,MAAM,CAAC;oBAChB,CAAC,CAAC,CAAC;gBACL,CAAC;gBA7CH;oBAAC,WAAI,CAAC;wBACF,IAAI,EAAE,aAAa;wBACnB,IAAI,EAAE,KAAK;qBACd,CAAC;;mCAAA;gBA2CF,sBAAC;;YAAD,CA1CA,AA0CC,CA1CoC,kBAAS,GA0C7C;YA1CD,6CA0CC,CAAA","file":"app/common/pipes/time.ago.js","sourcesContent":["import { Pipe, ChangeDetectorRef } from '@angular2/core';\nimport { Observable } from 'rxjs/Observable';\nimport { AsyncPipe } from '@angular2/common';\n\n@Pipe({\n    name: 'messageTime',\n    pure: false\n})\nexport class MessageTimePipe extends AsyncPipe {\n  value:Date;\n  timer:Observable<string>;\n\n  constructor(ref:ChangeDetectorRef) {\n    super(ref);\n  }\n\n  transform(obj: any, args?: any[]): any {\n    if (obj instanceof Date) {\n      this.value = obj;\n      if (!this.timer) {\n        this.timer = this.getObservable();\n      }\n      return super.transform(this.timer, args);\n    }\n    return super.transform(obj, args);\n  }\n\n  private getObservable() {\n    return Observable.interval(1000).startWith(0).map(() => {\n      var result:string;\n      // current time\n      let now = new Date().getTime();\n      // time since message was sent in seconds\n      let delta = (now - this.value.getTime()) / 1000;\n      // format string\n      if (delta < 10) {\n        result = 'jetzt';\n      } else if (delta < 60) { // sent in last minute\n        result = 'vor ' + Math.floor(delta) + ' Sekunden';\n      } else if (delta < 3600) { // sent in last hour\n        result = 'vor ' + Math.floor(delta / 60) + ' Minuten';\n      } else if (delta < 86400) { // sent on last day\n        result = 'vor ' + Math.floor(delta / 3600) + ' Stunden';\n      } else { // sent more than one day ago\n        result = 'vor ' + Math.floor(delta / 86400) + ' Tagen';\n      }\n\n      return result;\n    });\n  }\n}\n"],"sourceRoot":"/source/"}