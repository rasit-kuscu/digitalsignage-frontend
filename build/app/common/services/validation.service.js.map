{"version":3,"sources":["app/common/services/validation.service.ts"],"names":[],"mappings":"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","file":"app/common/services/validation.service.js","sourcesContent":["export class ValidationService {\n  static getValidatorErrorMessage(validatorName:string, validatorValue?:any) {\n    let config = {\n      'required': 'Zorunlu alan.',\n      'invalidCreditCard': 'Geçersiz kredi kartı numarası.',\n      'invalidEmailAddress': 'Geçersiz email adresi.',\n      'invalidPassword': 'Geçersiz şifre. Şifre en az 6 karakter uzunluğunda olmalı ve en az bir sayı barındırmalıdır.',\n      'minlength': `Minumum uzunluk ${validatorValue.requiredLength} karakter olmalıdır.`,\n      'mismatchedPasswords': 'Girmiş olduğunuz şifreler uyuşmuyor.',\n      'emptyCheckbox': 'En az bir tane seçilmeli.'\n    };\n\n    return config[validatorName];\n  }\n\n  static creditCardValidator(control) {\n    // Visa, MasterCard, American Express, Diners Club, Discover, JCB\n    if (control.value.match(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/)) {\n      return null;\n    } else {\n      return {'invalidCreditCard': true};\n    }\n  }\n\n  static emailValidator(control) {\n    // RFC 2822 compliant regex\n    if (control.value.match(/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/)) {\n      return null;\n    } else {\n      return {'invalidEmailAddress': true};\n    }\n  }\n\n  static passwordValidatorChange(control) {\n    // {6,100}           - Assert password is between 6 and 100 characters\n    // (?=.*[0-9])       - Assert a string has at least one number\n    if (control.value === '') {\n      return null;\n    }\n    if (control.value.match(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/)) {\n      return null;\n    } else {\n      return {'invalidPassword': true};\n    }\n  }\n\n  static checkboxGroupValidator(group) {\n    let check:boolean = false;\n    let i:number = 0;\n    let k:number = 0;\n    for (let control in group['controls']) {\n      if (group['controls'].hasOwnProperty(control)) {\n        if (group['controls'][control].value === '' || group['controls'][control].value === false) {\n          k++;\n        }\n        i++;\n      }\n    }\n\n    if (i === k) {\n      return {'emptyCheckbox': true};\n    } else {\n      return null;\n    }\n  }\n\n  static passwordValidator(control) {\n    // {6,100}           - Assert password is between 6 and 100 characters\n    // (?=.*[0-9])       - Assert a string has at least one number\n    if (control.value.match(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/)) {\n      return null;\n    } else {\n      return {'invalidPassword': true};\n    }\n  }\n\n  static passwordMatch(group) {\n    var firstValue = group.controls.password.value;\n    var secondValue = group.controls.re_password.value;\n    if (firstValue === secondValue) {\n      return null;\n    } else {\n      return {'mismatchedPasswords': true};\n    }\n  }\n}\n"],"sourceRoot":"/source/"}