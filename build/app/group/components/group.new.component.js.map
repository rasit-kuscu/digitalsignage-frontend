{"version":3,"sources":["app/group/components/group.new.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAmBA;gBAME,2BACQ,aAA2B,EAC3B,WAAwB,EACxB,oBAA0C,EAC3C,MAAa,EACZ,cAA8B;oBAJ9B,kBAAa,GAAb,aAAa,CAAc;oBAC3B,gBAAW,GAAX,WAAW,CAAa;oBACxB,yBAAoB,GAApB,oBAAoB,CAAsB;oBAC3C,WAAM,GAAN,MAAM,CAAO;oBACZ,mBAAc,GAAd,cAAc,CAAgB;oBAVvC,wBAAmB,GAAG,EAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAC,CAAC;oBACnD,aAAQ,GAAW,KAAK,CAAC;gBAUxB,CAAC;gBAEF,oCAAQ,GAAR;oBACC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;wBAC1C,MAAM,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;qBACjC,CAAC,CAAC;gBACJ,CAAC;gBAED,gCAAI,GAAJ;oBAAA,iBAoBC;oBAnBA,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,cAAc,EAAE,yCAAyC,EAAE,EAAC,OAAO,EAAC,CAAC,EAAE,YAAY,EAAC,KAAK,EAAC,CAAC,CAAC;oBAC5H,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;oBACrB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;yBAClE,SAAS,CACT,UAAC,QAAQ;wBACR,KAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;wBACtB,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;4BACnC,KAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,gBAAgB,EAAE,mBAAmB,EAAE,EAAE,CAAC,CAAC;4BAC7E,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC;wBAChD,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;4BACvC,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,KAAK,kBAAkB,CAAC,CAAC,CAAC;gCAC7C,KAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,MAAM,EAAE,2BAA2B,EAAE,EAAE,CAAC,CAAC;4BAC1E,CAAC;wBACF,CAAC;oBACF,CAAC,EACD,UAAA,KAAK;wBACJ,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,EAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,kBAAkB,CAAC,KAAK,CAAC,KAAK,CAAC,EAAC,CAAC,CAAC,CAAC;oBACpG,CAAC,CACD,CAAC;gBACH,CAAC;gBA9CF;oBAAC,gBAAS,CAAC;wBACV,QAAQ,EAAE,WAAW;wBACrB,WAAW,EAAE,uCAAuC;wBACpD,UAAU,EAAE,CAAC,0BAAiB,EAAE,gCAAwB,EAAE,qDAA4B,EAAE,kCAAe,EAAE,kCAAe,CAAC;wBACzH,SAAS,EAAE,CAAC,4BAAY,EAAE,6CAAoB,CAAC;qBAC/C,CAAC;;qCAAA;gBA0CF,wBAAC;YAAD,CAzCA,AAyCC,IAAA;YAzCD,iDAyCC,CAAA","file":"app/group/components/group.new.component.js","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport { Router, ROUTER_DIRECTIVES, ActivatedRoute } from '@angular/router';\nimport { REACTIVE_FORM_DIRECTIVES, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Http } from '@angular/http';\nimport { NotificationsService, SimpleNotificationsComponent } from 'angular2-notifications';\nimport { ValidationService } from '../../common/services/validation.service';\nimport { LoaderAnimation } from '../../common/components/loader.animation';\nimport { ControlMessages } from '../../common/components/control.messages';\nimport { Group } from '../../group/models/group';\nimport { GroupService } from '../../group/services/group.service';\nimport 'rxjs/add/operator/map';\nimport { Observable } from 'rxjs/Observable';\n\n@Component({\n\tselector: \"group-new\",\n\ttemplateUrl: \"./app/group/components/group.new.html\",\n\tdirectives: [ROUTER_DIRECTIVES, REACTIVE_FORM_DIRECTIVES, SimpleNotificationsComponent, ControlMessages, LoaderAnimation],\n\tproviders: [GroupService, NotificationsService]\n})\nexport class GroupNewComponent implements OnInit {\n\tnotificationOptions = {timeOut: 5000, maxStack: 1};\n\tisSaving:boolean = false;\n  newGroupForm:any;\n\tgroup:Group;\n\n  constructor(\n\t\tprivate _groupService: GroupService,\n\t\tprivate formBuilder: FormBuilder,\n\t\tprivate _notificationService: NotificationsService,\n\t\tpublic router:Router,\n\t\tprivate activatedRoute: ActivatedRoute) {\n  }\n\n\tngOnInit() {\n\t\tthis.newGroupForm = this.formBuilder.group({\n\t\t\t'name': ['', Validators.required]\n\t\t});\n\t}\n\n\tsave() {\n\t\tthis._notificationService.alert('Kaydediliyor', 'İşleminiz yapılıyor, lütfen bekleyiniz.', {timeOut:0, clickToClose:false});\n\t\tthis.isSaving = true;\n\t\tthis._groupService.save(new Group(0, this.newGroupForm.value.name))\n\t\t.subscribe(\n\t\t\t(response) => {\n\t\t\t\tthis.isSaving = false;\n\t\t\t\tif (response.status === 'success') {\n\t\t\t\t\tthis._notificationService.success('İşlem Başarılı', 'Grup oluşturuldu.', {});\n\t\t\t\t\tthis.router.navigate(['/management', 'group']);\n\t\t\t\t} else if (response.status === 'fail') {\n\t\t\t\t\tif (response.message === 'group_name_taken') {\n\t\t\t\t\t\tthis._notificationService.error('Hata', 'Girilen grup adı kayıtlı.', {});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\terror => {\n\t\t\t\tthis.router.navigate(['/error', {status: error.status, message: encodeURIComponent(error._body)}]);\n\t\t\t}\n\t\t);\n\t}\n}\n"],"sourceRoot":"/source/"}