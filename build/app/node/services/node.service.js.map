{"version":3,"sources":["app/node/services/node.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAYA;gBAGE,qBAAmB,QAAiB,EAAW,cAA6B;oBAAzD,aAAQ,GAAR,QAAQ,CAAS;oBAAW,mBAAc,GAAd,cAAc,CAAe;oBAC1E,IAAI,CAAC,YAAY,GAAG,cAAc,CAAC,YAAY,CAAC;gBAClD,CAAC;gBAEM,8BAAQ,GAAf,UAAgB,IAAY;oBAC1B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,iBAAiB,GAAG,IAAI,CAAC;yBAC5E,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAa,QAAQ,CAAC,IAAI,EAAE,EAA5B,CAA4B,CAAC,CAAC;gBAC/D,CAAC;gBAEM,0BAAI,GAAX,UAAY,MAAa,EAAE,IAAY;oBACrC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,YAAY,GAAG,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC;yBACtF,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAa,QAAQ,CAAC,IAAI,EAAE,EAA5B,CAA4B,CAAC,CAAC;gBAC/D,CAAC;gBAEM,0BAAI,GAAX,UAAY,IAAe;oBACzB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAC,OAAO,EAAE,wBAAc,EAAC,CAAC;yBACnH,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAa,QAAQ,CAAC,IAAI,EAAE,EAA5B,CAA4B,CAAC,CAAC;gBAC/D,CAAC;gBAEM,0BAAI,GAAX,UAAY,IAAe;oBACzB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAC,OAAO,EAAE,wBAAc,EAAC,CAAC;yBACjH,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAa,QAAQ,CAAC,IAAI,EAAE,EAA5B,CAA4B,CAAC,CAAC;gBAC/D,CAAC;gBAEM,4BAAM,GAAb,UAAc,IAAe;oBAC3B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAC,OAAO,EAAE,wBAAc,EAAC,CAAC;yBACnH,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAa,QAAQ,CAAC,IAAI,EAAE,EAA5B,CAA4B,CAAC,CAAC;gBAC/D,CAAC;gBAEM,4BAAM,GAAb,UAAc,MAAc;oBAC1B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,cAAc,GAAG,MAAM,CAAC;yBAC9E,GAAG,CAAC,UAAC,IAAc,IAAK,OAAc,IAAI,CAAC,IAAI,EAAE,EAAzB,CAAyB,CAAC,CAAC;gBACxD,CAAC;gBApCH;oBAAC,iBAAU,EAAE;;+BAAA;gBAqCb,kBAAC;YAAD,CApCA,AAoCC,IAAA;YApCD,qCAoCC,CAAA","file":"app/node/services/node.service.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport { Response } from '@angular/http';\nimport { AuthHttp } from 'angular2-jwt';\nimport { contentHeaders } from '../../common/headers';\nimport { RestReponse } from '../../common/rest.response';\nimport { SharedService } from '../../common/services/shared.service';\nimport 'rxjs/add/operator/map';\nimport { Observable } from 'rxjs/Observable';\nimport { Node } from '../models/node';\nimport { NodeConst } from '../models/node.const';\n\n@Injectable()\nexport class NodeService {\n  public itemsPerPage:number;\n\n  constructor(public authHttp:AuthHttp, private  _sharedService: SharedService) {\n    this.itemsPerPage = _sharedService.itemsPerPage;\n  }\n\n  public loadTree(type: string): Observable<RestReponse> {\n    return this.authHttp.get(this._sharedService.apiUrl + 'node/load-tree/' + type)\n      .map((response: Response) => <RestReponse>response.json());\n  }\n\n  public load(nodeId:number, type: string): Observable<RestReponse> {\n    return this.authHttp.get(this._sharedService.apiUrl + 'node/load/' + nodeId + '/' + type)\n      .map((response: Response) => <RestReponse>response.json());\n  }\n\n  public save(node: NodeConst): Observable<RestReponse> {\n    return this.authHttp.post(this._sharedService.apiUrl + 'node/create', JSON.stringify(node), {headers: contentHeaders})\n      .map((response: Response) => <RestReponse>response.json());\n  }\n\n  public move(node: NodeConst): Observable<RestReponse> {\n    return this.authHttp.post(this._sharedService.apiUrl + 'node/move', JSON.stringify(node), {headers: contentHeaders})\n      .map((response: Response) => <RestReponse>response.json());\n  }\n\n  public update(node: NodeConst): Observable<RestReponse> {\n    return this.authHttp.post(this._sharedService.apiUrl + 'node/update', JSON.stringify(node), {headers: contentHeaders})\n      .map((response: Response) => <RestReponse>response.json());\n  }\n\n  public delete(nodeId: number): Observable<RestReponse> {\n    return this.authHttp.delete(this._sharedService.apiUrl + 'node/delete/' + nodeId)\n      .map((data: Response) => <RestReponse> data.json());\n  }\n}\n"],"sourceRoot":"/source/"}